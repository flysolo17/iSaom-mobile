
@OptIn(ExperimentalMaterial3Api::class)

@Composable
fun StudentViewActivity(
    modifier: Modifier = Modifier,
    activity: Activity,
    state: StudentViewActivityState,
    events: (StudentViewActivityEvents) -> Unit,
    navHostController: NavHostController
) {
    val context = LocalContext.current


    val activityResultRegistryOwner = LocalActivityResultRegistryOwner.current

    // Remember a launcher for requesting the RECORD_AUDIO permission
    val requestPermissionLauncher = rememberLauncherForActivityResult(
        contract = ActivityResultContracts.RequestPermission(),
        onResult = { isGranted ->
            if (!isGranted) {
                context.toast("Audio permission is required to proceed.")
                CoroutineScope(Dispatchers.Main).launch {
                    delay(1000)
                    navHostController.popBackStack()
                }
            }
        }
    )
    val hasAudioPermission = remember {
        ContextCompat.checkSelfPermission(context, Manifest.permission.RECORD_AUDIO) == PackageManager.PERMISSION_GRANTED
    }



    LaunchedEffect(hasAudioPermission) {
        if (!hasAudioPermission) {
            requestPermissionLauncher.launch(Manifest.permission.RECORD_AUDIO)
        }
    }

    LaunchedEffect(
        activity
    ) {
        if (!activity.id.isNullOrEmpty()) {
            events.invoke(StudentViewActivityEvents.OnGetActivityQuestions(activity.id))
        }
    }

    var showFinishDialog by remember {
        mutableStateOf(false)
    }
    LaunchedEffect(state) {
        if (state.errors != null) {
            context.toast(state.errors)
        }
        if (state.isSubmitted != null) {
            context.toast(state.isSubmitted)
            showFinishDialog = true

        }
    }
    if (showFinishDialog) {
        var points = 0
        var maxPoints = 0

        state.questions.forEach {
            maxPoints += it.points
            val answer = state.answers[it.id]
            if (answer == it.answer) {
                points += it.points
            }
        }
        FinishActivityDialog(
            score = points,
            maxScore = maxPoints
        ) {      showFinishDialog = !showFinishDialog
            navHostController.popBackStack()
        }
    }

    when {
        state.isLoading -> ProgressBar(title = "Getting all contents")
        state.errors != null-> UnknownError(title =state.errors) {
            Button(onClick = {navHostController.popBackStack()}) {
                Text(text = "Back")
            }
        }
        state.questions.isEmpty() -> UnknownError(title = "No questions yet!")
        else -> {
            TakeActivityScreen(
                activity = activity,
                state = state,
                events = events
            )
        }
    }
}

@OptIn(ExperimentalFoundationApi::class)
@Composable
fun TakeActivityScreen(
    modifier: Modifier = Modifier,
    state: StudentViewActivityState,
    events: (StudentViewActivityEvents) -> Unit,
    activity: Activity
) {
    val scope = rememberCoroutineScope()
    val pagerState = rememberPagerState(
        initialPage = 0
    ) { state.questions.size }




    Column(
        modifier = modifier,
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Box(
            modifier = modifier.fillMaxWidth().padding(8.dp),
            contentAlignment = Alignment.Center
        ) {
            Text(
                text = activity.title.toString().take(10),
                style = MaterialTheme.typography.titleMedium,
                maxLines = 1,
                overflow = TextOverflow.Ellipsis
            )
        }

        val current = state.answers.size
        val max = state.questions.size

        LinearProgressIndicator(
            progress = {
                if (max > 0) current / max.toFloat() else 0f
            },
            modifier = Modifier
                .fillMaxWidth()
                .padding(8.dp),
            color = MaterialTheme.colorScheme.primary,
        )

        HorizontalPager(
            pagerState,
            userScrollEnabled = false,
            modifier = modifier.weight(1f)
        ) {
            val question = state.questions[it]
            QuestionDisplay(
                modifier = modifier,
                currentAnswer = state.answers[question.id],
                question = question,
                onSelectAnswer = {
                    events(
                        StudentViewActivityEvents.OnUpdateAnswers(question.id ?: "", it)
                    )
                }
            )
        }
        Row(
            modifier = modifier.fillMaxWidth().padding(16.dp),
            verticalAlignment = Alignment.CenterVertically,
            horizontalArrangement = Arrangement.SpaceBetween
        ) {
            if (pagerState.currentPage > 0) {
                TextButton(
                    onClick = {
                        scope.launch {
                            pagerState.animateScrollToPage(
                                pagerState.currentPage - 1
                            )
                        }
                    }
                ) {
                    Row(
                        verticalAlignment = Alignment.CenterVertically,
                        horizontalArrangement = Arrangement.spacedBy(4.dp)
                    ) {
                        Icon(
                            imageVector = Icons.Default.ArrowBack,
                            contentDescription = null
                        )
                        Text("Back")
                    }

                }
            } else {
                Box {
                    Text("")
                }
            }

            val isSubmit = pagerState.currentPage  == state.questions.size - 1
            Button(
                onClick = {
                    if (isSubmit) {
                        events.invoke(StudentViewActivityEvents.OnSubmitAnswer(activity = activity))
                    } else {
                        scope.launch {
                            pagerState.animateScrollToPage(pagerState.currentPage + 1)
                        }
                    }
                },
                shape = MaterialTheme.shapes.small
            ) { Text(
                text = if (isSubmit)"Submit" else "next"
            ) }
        }
    }
}

@Composable
fun QuestionDisplay(
    modifier: Modifier = Modifier,
    question: Question,
    currentAnswer : String ?,
    onSelectAnswer : (String) -> Unit,
) {
    val context  = LocalContext.current

    var classificationResult by remember { mutableStateOf("Press 'Classify Audio' to start") }
    var isProcessing by remember { mutableStateOf(false) }

    val audioClassificationListener = object : AudioClassificationListener {
        override fun onError(error: String) {
            classificationResult = "Error: $error"
            isProcessing = false

        }
        override fun onResult(results: List<Category>, inferenceTime: Long) {
            val detectedLabels = results.joinToString(", ") { it.label }
            classificationResult = detectedLabels

            isProcessing = false
        }
    }

    val audioClassifierHelper = remember {
        AudioClassifierHelper(
            context = context,
            listener = audioClassificationListener
        )
    }

    DisposableEffect(Unit) {
        onDispose {
            audioClassifierHelper.stopAudioClassification()
        }
    }

    LaunchedEffect(classificationResult) {
        if (classificationResult != "Background Noise") {

            if (classificationResult.contains(question.answer ?: "")) {
                classificationResult = question.answer ?: ""
                audioClassifierHelper.stopAudioClassification()
                delay(1000)
                onSelectAnswer(question.answer ?: "")
            }
        }
    }

    Column(
        modifier = modifier.fillMaxSize().padding(16.dp),
        verticalArrangement = Arrangement.spacedBy(8.dp)
    ) {
        Card(
            modifier = modifier.fillMaxWidth().padding(8.dp)
        ) {
            Column(
                modifier = modifier.fillMaxWidth().padding(16.dp),
                horizontalAlignment = Alignment.CenterHorizontally,
                verticalArrangement = Arrangement.spacedBy(12.dp)
            ) {
                Text("${question.title}", style = MaterialTheme.typography.labelLarge.copy(
                    textAlign = TextAlign.Center
                ))
                if (question.image != null) {
                    if (!question.image.isNullOrEmpty()) {
                        AsyncImage(
                            model = question.image,
                            contentDescription = "${question.title} cover",
                            modifier = Modifier
                                .height(200.dp)
                                .clip(RoundedCornerShape(8.dp)),
                            contentScale = ContentScale.Crop
                        )
                    }
                }
            }
        }

        Spacer(
            modifier = modifier.weight(1f)
        )
        if (question.choices.isNotEmpty()) {
            Column(
                modifier = modifier.fillMaxWidth(),
                verticalArrangement = Arrangement.spacedBy(8.dp),
            ) {
                question.choices.forEach { choice ->
                    val isSelect = currentAnswer == choice
                    if (isSelect) {
                        Button(
                            modifier = modifier.fillMaxWidth(),
                            onClick = {
                                onSelectAnswer(choice)
                            },
                            shape = MaterialTheme.shapes.small
                        ) {
                            Box(
                                modifier = modifier.fillMaxWidth(),
                                contentAlignment = Alignment.CenterStart
                            ) {
                                Text(
                                    text = choice,
                                    modifier = modifier.padding(8.dp)
                                )
                            }

                        }
                    } else {
                        OutlinedButton(
                            modifier = modifier.fillMaxWidth(),
                            onClick = {
                                onSelectAnswer(choice)
                            },
                            shape = MaterialTheme.shapes.small
                        ) {
                            Box(
                                modifier = modifier.fillMaxWidth(),
                                contentAlignment = Alignment.CenterStart
                            ) {
                                Text(

                                    text = choice,
                                    modifier = modifier.padding(8.dp)
                                )
                            }
                        }
                    }
                }
            }
        } else {
            Column(
                modifier = modifier.fillMaxWidth().padding(16.dp),
                verticalArrangement = Arrangement.Center,
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                FilledIconButton(
                    colors =IconButtonDefaults.iconButtonColors(
                        containerColor = if (isProcessing) Color.White else MaterialTheme.colorScheme.primary,
                        contentColor = if (isProcessing) Color.Black else MaterialTheme.colorScheme.onPrimary
                    ),
                    onClick = {
                        audioClassifierHelper.startAudioClassification()
                    }
                ) { Icon(
                    imageVector = Icons.Default.Mic,
                    contentDescription = "Mic"
                ) }
                Spacer(modifier = modifier.height(16.dp))
                Text("${classificationResult}")
            }

        }

    }
}

